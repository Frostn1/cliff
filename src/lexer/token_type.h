#ifndef TOY_TOKEN_TYPE_H
#define TOY_TOKEN_TYPE_H


typedef enum {
	
	TOKEN_LEFT_PAREN = 0, //single character token s
	TOKEN_RIGHT_PAREN = 1,
	TOKEN_LEFT_BRACE = 2,
	TOKEN_RIGHT_BRACE = 3,
	TOKEN_LEFT_BRACKET = 4,
	TOKEN_RIGHT_BRACKET = 5,
	TOKEN_SEMICOLON = 6,
	TOKEN_COMMA = 7,
	TOKEN_PLUS = 8, //one or two character token s
	TOKEN_PLUS_EQUAL = 9,
	TOKEN_PLUS_PLUS = 10,
	TOKEN_MINUS = 11,
	TOKEN_MINUS_EQUAL = 12,
	TOKEN_MINUS_MINUS = 13,
	TOKEN_MINUS_MORE = 14, //MINUS_LESS is for function synta x
	TOKEN_STAR = 15,
	TOKEN_STAR_EQUAL = 16,
	TOKEN_SLASH = 17,
	TOKEN_SLASH_EQUAL = 18,
	TOKEN_MODULO = 19,
	TOKEN_MODULO_EQUAL = 20,
	TOKEN_BANG = 21,
	TOKEN_BANG_EQUAL = 22,
	TOKEN_EQUAL = 23,
	TOKEN_EQUAL_EQUAL = 24,
	TOKEN_EQUAL_GREATER = 25, //EQUAL_GREATER is for the arrow synta x
	TOKEN_GREATER = 26,
	TOKEN_GREATER_EQUAL = 27,
	TOKEN_LESS = 28,
	TOKEN_LESS_EQUAL = 29,
	TOKEN_AND_AND = 30,//these can single, doubl e
	TOKEN_AND = 31,
	TOKEN_OR_OR = 32,
	TOKEN_OR = 33,
	TOKEN_DOT = 34,
	TOKEN_DOT_DOT = 35,
	TOKEN_QUESTION = 36,//ternary operato r
	TOKEN_COLON = 37,
	TOKEN_IDENTIFIER,//literal = 38s
	TOKEN_INT = 39,
	TOKEN_FLOAT = 40,
	TOKEN_STRING = 41,
	TOKEN_ELSE = 42,
	TOKEN_FALSE = 43,
	TOKEN_FOR = 44,
	TOKEN_IF = 45,
	TOKEN_PRINT = 46,
	TOKEN_RETURN = 47,
	TOKEN_TRUE = 48,
	TOKEN_LOOP = 49,
	TOKEN_FUNCTION = 50,
	TOKEN_PASS = 51, //do nothing//met a
	TOKEN_ERROR = 52,
	TOKEN_EOF = 53,
	TOKEN_END_LINE = 54,
	TOKEN_INT_V = 55,// Variables Primitive Usable Type s
	TOKEN_FLOAT_V = 56,
	TOKEN_STRING_V = 57

} TokenType;

#endif // !TOKEN_TYPE_H
