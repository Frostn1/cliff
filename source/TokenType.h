#ifndef TOY_TOKEN_TYPE_H
#define TOY_TOKEN_TYPE_H


typedef enum {
	//single character tokens
	TOKEN_LEFT_PAREN,
	TOKEN_RIGHT_PAREN,
	TOKEN_LEFT_BRACE,
	TOKEN_RIGHT_BRACE,
	TOKEN_LEFT_BRACKET,
	TOKEN_RIGHT_BRACKET,
	TOKEN_SEMICOLON,
	TOKEN_COMMA,

	//one or two character tokens
	TOKEN_PLUS,
	TOKEN_PLUS_EQUAL,
	TOKEN_PLUS_PLUS,

	TOKEN_MINUS,
	TOKEN_MINUS_EQUAL,
	TOKEN_MINUS_MINUS,
	TOKEN_MINUS_MORE, //MINUS_LESS is for function syntax
	TOKEN_STAR,
	TOKEN_STAR_EQUAL,

	TOKEN_SLASH,
	TOKEN_SLASH_EQUAL,

	TOKEN_MODULO,
	TOKEN_MODULO_EQUAL,

	TOKEN_BANG,
	TOKEN_BANG_EQUAL,

	TOKEN_EQUAL,
	TOKEN_EQUAL_EQUAL,
	TOKEN_EQUAL_GREATER, //EQUAL_GREATER is for the arrow syntax

	TOKEN_GREATER,
	TOKEN_GREATER_EQUAL,

	TOKEN_LESS,
	TOKEN_LESS_EQUAL,

	//these can single, double
	TOKEN_AND_AND,
	TOKEN_AND,
	TOKEN_OR_OR,
	TOKEN_OR,
	TOKEN_DOT,
	TOKEN_DOT_DOT,

	//ternary operator
	TOKEN_QUESTION,
	TOKEN_COLON,


	//literals
	TOKEN_IDENTIFIER,
	TOKEN_INT,
	TOKEN_FLOAT,
	TOKEN_STRING,

	TOKEN_ELSE,
	TOKEN_FALSE,
	TOKEN_FOR,
	TOKEN_IF,
	TOKEN_PRINT,
	TOKEN_RETURN,
	TOKEN_TRUE,
	TOKEN_LOOP,
	TOKEN_FUNCTION,

	//meta
	TOKEN_PASS, //do nothing
	TOKEN_ERROR,
	TOKEN_EOF,
	TOKEN_END_LINE,


	// Variables Primitive Usable Types
	TOKEN_INT_V,
	TOKEN_FLOAT_V,
	TOKEN_STRING_V

} TokenType;

#endif // !TOKEN_TYPE_H
